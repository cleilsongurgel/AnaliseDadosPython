# -*- coding: utf-8 -*-
"""Análise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIOhFsFodC7clXZPisc6qNidtyC-bMk5

# Análise exploratória com python e a biblioteca Pandas

## Tarefas iniciais

### Importando as bibliotecas necessárias para a análise
"""

# Importando as bibliotecas necessárias para a análise
import pandas as pd
import matplotlib.pyplot as plt

# configurando o estilo
plt.style.use("seaborn")

"""### Obterndo o arquivo para a análise

"""

# Opção para inserção do arquivo via upload
# Atenção, descomentar as linhas abaixo se por acaso for utilizar essa opção
#from google.colab import files
#arq = files.upload()
#df = pd.read_excel("AdventureWorks.xlsx")

# Criando o dataframe
df = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/Análise Exploratória/AdventureWorks.xlsx")

# Verificando se do dataframe foi corretamente carregado
df.head()

# Verificando a quantidade de linhas e colunas que o dataframe possui
df.shape

# analisando os tipos de dados em cada coluna do dataframe
df.dtypes

"""## Iniciando a análise

### Qual a receita total?
"""

# Somando os valores de venda para saber a receita total
df["Valor Venda"].sum()

"""### Qual custo total?"""

# Criando a coluna custo
df["Custo"] = df["Custo Unitário"].mul(df["Quantidade"])

round(df["Custo"].sum(),2)

"""### Definindo o lucro"""

# Criando a coluna lucro a partir da receita menos o custo
df["Lucro"] = df["Valor Venda"] - df["Custo"]

# Computando o lucro total
round(df["Lucro"].sum(),2)

"""### Analisando o tempo de envio das mercadorias"""

#Criando uma coluna como total de dias para envio do produto
df["Tempo_envio"] = df["Data Envio"] - df["Data Venda"]
#df.head()

"""### Calculando a media de tempo de envio para cada marca"""

# Extraindo apenas os dias
df["Tempo_envio"] = (df['Data Envio'] - df['Data Venda']).dt.days
#df.head(1)

# Obtendo a média do tempo de envio por marca com a função mean()
df.groupby("Marca")['Tempo_envio'].mean()

### Verificando valores nulos ou dados faltantes
#df.isnull().sum()

"""### Calculando Lucro por Ano e Marca"""

# Agrupando o dataframe por ano e marca
df.groupby([df['Data Venda'].dt.year, "Marca"])['Lucro'].sum()

# Formatando valores de ponto flutuante
pd.options.display.float_format = '{:20,.2f}'.format

#Resetando o index
lucro_ano = df.groupby([df['Data Venda'].dt.year,"Marca"])["Lucro"].sum().reset_index()
lucro_ano

#Total de produtos vendidos
df.groupby("Produto")['Quantidade'].sum().sort_values(ascending=False)

"""### Gerando Gráficos"""

#Gráfico total de produtos vendidos
df.groupby("Produto")['Quantidade'].sum().sort_values(ascending=True).plot.barh(title="Total Produtos Vendidos")
plt.xlabel("Total")
plt.ylabel("Produto")

# Grafico Lucro por ano
df.groupby(df["Data Venda"].dt.year)["Lucro"].sum().plot.bar(title="Lucro x Ano")
plt.xlabel("Ano")
plt.ylabel("Receita")

df.groupby(df['Data Venda'].dt.year)["Lucro"].sum()

# Selecionando apenas vendas de 2009
df_2009 = df[df["Data Venda"].dt.year == 2009]
#df_2019.head()

# Gráfico lucro de 2009 por mês
df_2009.groupby(df_2009["Data Venda"].dt.month)["Lucro"].sum().plot(title="Lucro x Mês")
plt.xlabel("Mês")
plt.ylabel("Lucro")

# Gráfico lucro por marca
df_2009.groupby("Marca")["Lucro"].sum().plot.bar(title="Lucro x Marca")
plt.xlabel("Marca")
plt.ylabel("Lucro")
plt.xticks(rotation='horizontal');

# Lucro por classe
df_2009.groupby("Classe")["Lucro"].sum().plot.bar(title="Lucro x Classe")
plt.xlabel("Classe")
plt.ylabel("Lucro")
plt.xticks(rotation='horizontal');

"""### Análises Estatisticas"""

# Estatisticas da base
df['Tempo_envio'].describe()

# Gráfico de Boxplot
plt.boxplot(df['Tempo_envio']);

# Histograma
plt.hist(df['Tempo_envio']);

#Tempo máximo de envio
df['Tempo_envio'].max()

#Tempo mínimo de envio
df['Tempo_envio'].min()

# Identificando o Outlier
df[df['Tempo_envio']== 20]

df.to_csv('df_vendas_novo.csv', index=False)
